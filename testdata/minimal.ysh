#
# Keywords
#

# YSH keywords
var v = 42
const c = 99
setvar dq = 'zz'
setglobal g = "yy"

proc p { echo hi }
func f(x) { return (x) }

call len('str')

= len(g)  # = keyword

#=foo
#echo =foo

# Shell keywords
if test --file / {
  echo 'exists'
} elif true {
  echo 'true'
} else {
  echo 'else'
}

case (42) {
  (42)   { echo 'match' }
  /d+/   { echo 'pattern' }
  'str'  { echo 'str' }
  (else) { echo 'other' }
}

for x in a b {
  echo $x
}

while false {
  echo hi
}

# Comment at beginning of line

echo not#comment  # space required before comment

#
# Quotes can be quoted with \
# e.g. with \' \"
#

echo \'single \'single \"double \"double

#
# Single-quoted strings are raw by default
#

# Command mode
echo '/usr/bin'
echo r'C:\Program Files\'  # r'' prefix is allowed

# expression mode
var r1 = '/usr/bin/'
var r2 = r'C:\Program Files\' # r'' prefix is allowed

# corner cases for r''
echo ls --foo='bar'
echo ls --foo=r'bar'
echo ls bar'bar'
echo ls -r'bar' 

#
# Double-quoted strings support interpolation (and a few \ escapes)
#

echo "hi $r1 \$ \" \\"
var dq = "hi $r2 \$ \" \\"

echo $"hi $r1 \$ \" \\"
var dq = $"hi $r2 \$ \" \\"

#
# J8 strings have \ escapes
#

echo b'hi \t \' \\'
var j8 = b'hi \t \' \\'

echo u'hi \t \' \\'
var j8 = u'hi \t \' \\'

#
# Triple-quoted strings
#  ''' r'''
#  """
#  b""" u"""
#

var empty = ''

# raw

echo '''
  C:\Program Files\
  one ' 
  two ''
  ''' | cat

var x = '''
  C:\Program Files\
  one ' 
  two ''
  ''' ++ empty

echo r'''
  C:\Program Files\
  one '
  two ''
  ''' | cat

var x = r'''
  C:\Program Files\
  one '
  two ''
  ''' ++ empty

# double quoted

echo """
  one "
  two ""
  """

var x = """
  one "
  two ""
  """

echo $"""
  \$ one "
  \$ two ""
  """

var x = $"""
  \$ one "
  \$ two ""
  """

# j8

echo b'''
  one '
  two ''
  three \'''
  ''' | cat

var x = b'''
  j8 \'''
  one '
  two ''
  three \'''
  ''' ++ empty

echo u'''
  one '
  two ''
  three \'''
  ''' | cat

var x = u'''
  j8 \'''
  one '
  two ''
  three \'''
  ''' ++ empty

#
# Expression Work Fine, Without Color
#

var d = {hi: 42}
echo $[42 + d['hi']]
echo "sum = $[42 + d['hi']]"

var ch = 'i'
echo $[42 + d["h$[ch]"]]


#
# Bug -  nested double quotes don't work correctly
#
# This is Limitation of the MINIMAL style - lexing is non-recursive
#

echo "$[42 + d["h$[ch]"]]"
echo "hi $["inner"]"

echo done

#
# Interpolation
#

var base_dir = '/bin'
var file = 'zz'

echo $base_dir/file /tmp/$file-suffix

# Inside double quotes - require modes, Vim regions
echo "$base_dir/file /tmp/$file-suffix"

var name42 = x
var name42x = x
var _x = x

echo $name42 $name42x
echo ${name42} ${name42x}
echo $_x ${_x}

set -- {0..11}
echo $0 ${11}
echo bad $00 $1a
