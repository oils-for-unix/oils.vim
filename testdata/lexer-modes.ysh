
var x = 42

var a = [0, 1, 2]

# nested
var b = [a[2], a[1], a[0]]

func f(x) { return (x) }
var c = (f(2), f(1), f(0))

pp (1 + (a[1] + 3)); echo next
# f(x)

pp ('hi' ++ "hi $x" ++ r'c:\' ++ b'\n')

if (42 > a[0]) {
  echo 'yes'
}

for i, item in (a) {
  echo "$i $item"
}

pp [a]

echo *.[ch]

: '''
" TODO:
"
" More structure
"
" - backslash escapes within strings:
"    - \" \$ in double quotes
"    - \u{123456} in J8-style strings
"
" - Is there way to understand recursion like ${a:-'foo'}?  Or just leave that
"   out
" - There is also recursion of $(hostname) and such.
"
" - Here docs?  They are hard, could leave them out of YSH
'''
